#include "imports/stdlib.fc";
#include "constants.fc";
#include "messages.fc";

{-
    storage#_
        storage_contract_address:MsgAddress bag_info:^Cell
        provider_address:MsgAddress
        next_proof:uint64 last_proof_time:uint32 = Storage;
-}
(slice, cell, slice, int, int) load_data() inline {
    var ds = get_data().begin_parse();

    var (
        storage_contract_address,
        bag_info, provider_address,
        next_proof, last_proof_time
    ) = (
        ds.load_msg_addr(),
        ds.load_ref(), ds.load_msg_addr(),
        ds.load_uint(64), ds.load_uint(32)
    );
    return (
        storage_contract_address,
        bag_info, provider_address,
        next_proof, last_proof_time
    );
}

;; () save_data(
;;     storage_contract_address,
;;     torrent_hash, owner_address, provider_address
;;     file_merkle_hash, file_size_in_bytes,
;;     next_proof, last_proof_time
;; ) impure inline {
;;     set_data(
;;         begin_cell()
;;             .store_msg_addr(storage_contract_address)
;;             .store_uint(torrent_hash, 256)
;;             .store_msg_addr(owner_address)
;;             .store_msg_addr(provider_address)
;;             .store_uint(file_merkle_hash, 256)
;;             .store_uint(file_size_in_bytes, 64)
;;             .store_uint(next_proof, 64)
;;             .store_uint(last_proof_time, 32)
;;             .end_cell()
;;     );
;; }

int check_proof(int merkle_hash, int byte_to_proof, int file_size, cell file_dict_proof) {
    (slice cs, int special) = file_dict_proof.begin_parse_special();
    if (~ special) {
        return false;
    }
    if (cs~load_uint(8) != 3) { ;; Merkle proof
        return false;
    }
    if (cs~load_uint(256) != merkle_hash) {
        return false;
    }
    cell file_dict = cs~load_ref();
    int key_len = 0;
    while ((CHUNK_SIZE << key_len) < file_size) {
        key_len += 1;
    }
    (slice data, int found?) = file_dict.udict_get?(key_len, byte_to_proof / CHUNK_SIZE);
    if (found?) {
        return true;
    }
    return false;
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    if (in_msg_body.slice_empty?()) {
        ;; return add_to_balance(msg_value);
    }
    int op = in_msg_body~load_uint(32);
    if (op == 0) {
        ;; return add_to_balance(msg_value);
    }

    int query_id = in_msg_body~load_uint(64);

    if (op == op::submit_storage_proof) {
        cell file_dict_proof = in_msg_body~load_ref();
        (
            storage_contract_address,
            torrent_hash, owner_address, provider_address,
            file_merkle_hash, file_size_in_bytes,
            next_proof, last_proof_time
        ) = load_data();
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, provider_address));
        throw_unless(error::invalid_storage_proof, check_proof(file_merkle_hash, next_proof, file_size_in_bytes, file_dict_proof));
        next_proof = rand(file_size_in_bytes);
        int actual_span = min(now() - last_proof_time, max_storage_proof_span);
        ;; int bounty = muldiv(file_size_in_bytes * rate_per_mb_day, actual_span, 24 * 60 * 60 * 1024 * 1024);
        ;; balance = max(0, balance - bounty);
        last_proof_time = now();

        save_data(
            storage_contract_address,
            torrent_hash, owner_address, provider_address,
            file_merkle_hash, file_size_in_bytes,
            next_proof, last_proof_time
        );

        ;; todo: report 'on_submit_storage_proof' to storage-contract

        ;; Send remaining balance back
        cell msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(sender_address)
            .store_uint(0, 4 + 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 64 + 2);
    }
}
