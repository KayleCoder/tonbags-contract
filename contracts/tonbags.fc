#include "imports/stdlib.fc";
#include "constants.fc";
#include "messages.fc";
#include "params.fc";
#include "utils.fc";

{-
    storage#_
        admin_address:MsgAddress bags:^Cell storage_contract_code:^Cell = Storage;
-}
(slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_dict(),
        ds~load_ref()
    );
}

() save_data(slice admin_address, cell bags, cell storage_contract_code) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_dict(bags)
            .store_ref(storage_contract_code)
            .end_cell()
    );
}

cell load_bags_dict() inline {
    (slice admin_address, cell bags, cell storage_contract_code) = load_data();
    return bags;
}

() save_bags_dict(cell bags_dict) impure inline {
    (slice admin_address, cell bags, cell storage_contract_code) = load_data();
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_dict(bags_dict)
            .store_ref(storage_contract_code)
            .end_cell()
    );
}

() deploy_storage_contract(
    cell storage_contract_code, slice owner_address, int query_id,
    int file_size, int merkle_hash, int torrent_hash, int total_storage_fee
) impure {
    throw_unless(error::file_too_small, file_size >= minimal_file_size);
    throw_unless(error::file_too_big, file_size <= maximal_file_size);

    cell state_init = build_storage_contract_stateinit(
        storage_contract_code, torrent_hash, owner_address, total_storage_fee, merkle_hash, file_size
    );
    slice storage_contract_address = calculate_storage_contract_address(state_init);

    cell bags_dict = load_bags_dict();
    var (_, success?) = bags_dict.udict_get?(256, torrent_hash);
    if (success?) {
        throw(error::duplicated_torrent_hash);
    }
    bags_dict.udict_set(256, torrent_hash, storage_contract_address);
    save_bags_dict(bags_dict);

    cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(storage_contract_address)
            .store_coins(0)
            .store_uint(4 + 2, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_uint(op::deploy_storage_contract, 32)
            .store_uint(query_id, 64)
            .end_cell();
    send_raw_message(msg, 64);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice admin_address, cell bags, cell storage_contract_code) = load_data();

    if (op == op::update_admin) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(new_admin_address, bags, storage_contract_code);
        return ();
    }
    if (op == op::deploy_storage_contract) {
        throw_unless(error::not_enough_money, msg_value >= min_storage_fee);

        ;; torrent_info piece_size:uint32 file_size:uint64 root_hash:(## 256) header_size:uint64 header_hash:(## 256)
        ;;     microchunk_hash:(Maybe (## 256)) description:Text = TorrentInfo;
        ;;
        ;; new_storage_contract#00000001 query_id:uint64 info:(^ TorrentInfo) microchunk_hash:uint256 = NewStorageContract;
        cell torrent_info = in_msg_body~load_ref();
        int torrent_hash = cell_hash(torrent_info);
        slice info_cs = torrent_info.begin_parse();
        info_cs~skip_bits(32);
        int file_size = info_cs~load_uint(64);
        int merkle_hash = in_msg_body~load_uint(256);

        deploy_storage_contract(storage_contract_code, sender_address, query_id, file_size, merkle_hash, torrent_hash, msg_value);

        return ();
    }

    ;; if the message contains an op that is not known to this contract, we throw
    throw(0xffff);
}

slice get_storage_contract_address(int torrent_hash) method_id {
    cell bags_dict = load_bags_dict();
    var (storage_contract_address, success?) = bags_dict.udict_get?(256, torrent_hash);
    if (success?) {
        return storage_contract_address;
    }
    return "";
}