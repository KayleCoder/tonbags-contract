#include "constants.fc";
#include "imports/stdlib.fc";

{-
    storage#_
        admin_address:MsgAddress bags:^Cell
        storage_contract_code:^Cell storage_provider_contract_code:^Cell = Storage;
-}

(slice, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; bags dict
        ds~load_ref(), ;; storage_contract_code
        ds~load_ref()  ;; storage_provider_contract_code
    );
}

() save_data(slice admin_address, cell bags, cell storage_contract_code, cell storage_provider_contract_code) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_ref(bags)
            .store_ref(storage_contract_code)
            .store_ref(storage_provider_contract_code)
            .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (slice admin_address, cell bags, cell storage_contract_code, cell storage_provider_contract_code) = load_data();

    if (op == op::update_admin) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(new_admin_address, bags, storage_contract_code, storage_provider_contract_code);
        return ();
    }

    ;; if the message contains an op that is not known to this contract, we throw
    throw(0xffff);
}
